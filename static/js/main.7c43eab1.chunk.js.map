{"version":3,"sources":["context/AppContext.js","components/utilities/Placeholder.js","components/DisplayArea.js","components/InputArea.js","App.js","index.js"],"names":["AppContext","createContext","renderer","marked","Renderer","link","href","title","text","placeholder","DisplayArea","useContext","appState","dispatch","maxDisplay","markdown","id","className","Provider","value","onClick","type","document","getElementById","classList","toggle","dangerouslySetInnerHTML","__html","InputArea","maxInput","useEffect","e","onChange","target","setOptions","breaks","App","initialState","useReducer","state","action","ReactDOM","render"],"mappings":"+PAIeA,EAFIC,0B,qCC8CNC,EAAW,IAAIC,IAAOC,SACnCF,EAASG,KAAO,SAASC,EAAMC,EAAOC,GACpC,MAAM,4BAAN,OAAmCF,EAAnC,aAA4CE,EAA5C,SAGaC,MApDE,8qCC8CFC,MAvCf,WAAwB,IAAD,EACUC,qBAAWX,GAAlCY,EADa,EACbA,SAAUC,EADG,EACHA,SACVC,EAAyBF,EAAzBE,WAAYC,EAAaH,EAAbG,SAQpB,OACE,yBAAKC,GAAG,eAAeC,UAAU,UAC/B,4BAAQD,GAAG,iBAAiBC,UAAU,YACpC,kBAAC,IAAYC,SAAb,CAAsBC,MAAO,CAAEF,UAAW,cACxC,4BACE,kBAAC,IAAD,MADF,cAKF,4BACED,GAAG,cACHC,UAAU,eACVG,QAlBiB,WACvBP,EAAS,CAAEQ,KAAM,kBAAmBP,YAAaA,IACjDQ,SAASC,eAAe,cAAcC,UAAUC,OAAO,OACvDH,SAASC,eAAe,gBAAgBC,UAAUC,OAAO,SAiBlDX,EAAa,kBAAC,IAAD,MAAuB,kBAAC,IAAD,QAGzC,yBAAKE,GAAG,eAAeC,UAAU,YAC/B,yBACED,GAAG,UACHU,wBAAyB,CACvBC,OAAQxB,IAAOY,EAAU,CAAEb,SAAUA,UCgBlC0B,MAhDf,WAAsB,IAAD,EACYjB,qBAAWX,GAAlCY,EADW,EACXA,SAAUC,EADC,EACDA,SACVE,EAAuBH,EAAvBG,SAAUc,EAAajB,EAAbiB,SAgBlB,OAdAC,qBAAU,WACRjB,EAAS,CAAEQ,KAAM,qBAAsBN,SAAUN,MAChD,CAACI,IAaF,yBAAKG,GAAG,aAAaC,UAAU,UAC7B,4BAAQD,GAAG,eAAeC,UAAU,YAClC,kBAAC,IAAYC,SAAb,CAAsBC,MAAO,CAAEF,UAAW,cACxC,4BACE,kBAAC,IAAD,MADF,WAKF,4BACED,GAAG,YACHC,UAAU,eACVG,QAtBe,SAAAW,GACrBlB,EAAS,CAAEQ,KAAM,gBAAiBQ,UAAWA,IAC7CP,SAASC,eAAe,cAAcC,UAAUC,OAAO,OACvDH,SAASC,eAAe,gBAAgBC,UAAUC,OAAO,SAqBlDI,EAAW,kBAAC,IAAD,MAAuB,kBAAC,IAAD,QAGvC,yBAAKb,GAAG,aAAaC,UAAU,YAC7B,8BACED,GAAG,SACHP,YAAaA,EACbY,KAAK,OACLF,MAAOJ,EACPiB,SA3BoB,SAAAD,GAC1BlB,EAAS,CAAEQ,KAAM,qBAAsBN,SAAUgB,EAAEE,OAAOd,c,MC2B9DhB,IAAO+B,WAAW,CAChBC,QAAQ,IAGKC,MA9Cf,WACE,IAAMC,EAAe,CACnBtB,SAAU,GACVD,YAAY,EACZe,UAAU,GAJC,EA6BgBS,sBAtBR,WAAmC,IAAlCC,EAAiC,uDAAzBF,EAAcG,EAAW,uCACrD,OAAQA,EAAOnB,MACb,IAAK,kBACH,OAAO,eACFkB,EADL,CAEEzB,WAAY0B,EAAO1B,aAEvB,IAAK,gBACH,OAAO,eACFyB,EADL,CAEEV,SAAUW,EAAOX,WAErB,IAAK,qBACH,OAAO,eACFU,EADL,CAEExB,SAAUyB,EAAOzB,WAErB,QACE,OAAOwB,KAIyCF,GA7BzC,mBA6BNzB,EA7BM,KA6BIC,EA7BJ,KA+Bb,OACE,kBAAC,EAAWK,SAAZ,CAAqBC,MAAO,CAAEP,WAAUC,aACtC,yBAAKI,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCrCRwB,IAASC,OAAO,kBAAC,EAAD,MAASpB,SAASC,eAAe,W","file":"static/js/main.7c43eab1.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nconst AppContext = createContext();\r\n\r\nexport default AppContext;\r\n","import marked from 'marked';\r\nconst placeholder = `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n  \r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n  \r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.com), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | ------------- \r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want! \r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n\r\n![React Logo w/ Text](https://goo.gl/Umyytc)\r\n`;\r\n\r\nexport const renderer = new marked.Renderer();\r\nrenderer.link = function(href, title, text) {\r\n  return `<a target=\"_blank\" href=\"${href}\">${text}</a>`;\r\n};\r\n\r\nexport default placeholder;\r\n","import React, { useContext } from 'react';\r\nimport AppContext from '../context/AppContext';\r\nimport { FaEye } from 'react-icons/fa';\r\nimport { IconContext } from 'react-icons';\r\nimport { MdFullscreen, MdFullscreenExit } from 'react-icons/md';\r\nimport marked from 'marked';\r\nimport { renderer } from './utilities/Placeholder';\r\n\r\nfunction DisplayArea() {\r\n  const { appState, dispatch } = useContext(AppContext);\r\n  const { maxDisplay, markdown } = appState;\r\n\r\n  const handleMaxDisplay = () => {\r\n    dispatch({ type: 'SET_MAX_DISPLAY', maxDisplay: !maxDisplay });\r\n    document.getElementById('input-area').classList.toggle('min');\r\n    document.getElementById('display-area').classList.toggle('max');\r\n  };\r\n\r\n  return (\r\n    <div id='display-area' className='column'>\r\n      <header id='display-header' className='col-head'>\r\n        <IconContext.Provider value={{ className: 'head-icon' }}>\r\n          <h1>\r\n            <FaEye />\r\n            Previewer\r\n          </h1>\r\n        </IconContext.Provider>\r\n        <button\r\n          id='display-btn'\r\n          className='col-head-btn'\r\n          onClick={handleMaxDisplay}\r\n        >\r\n          {maxDisplay ? <MdFullscreenExit /> : <MdFullscreen />}\r\n        </button>\r\n      </header>\r\n      <div id='display-body' className='col-body'>\r\n        <div\r\n          id='preview'\r\n          dangerouslySetInnerHTML={{\r\n            __html: marked(markdown, { renderer: renderer })\r\n          }}\r\n        ></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DisplayArea;\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { FaCode } from 'react-icons/fa';\r\nimport AppContext from '../context/AppContext';\r\nimport placeholder from '../components/utilities/Placeholder';\r\nimport { IconContext } from 'react-icons';\r\nimport { MdFullscreen, MdFullscreenExit } from 'react-icons/md';\r\n\r\nfunction InputArea() {\r\n  const { appState, dispatch } = useContext(AppContext);\r\n  const { markdown, maxInput } = appState;\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'SET_MARKDOWN_INPUT', markdown: placeholder });\r\n  }, [dispatch]);\r\n\r\n  const handleMaxInput = e => {\r\n    dispatch({ type: 'SET_MAX_INPUT', maxInput: !maxInput });\r\n    document.getElementById('input-area').classList.toggle('max');\r\n    document.getElementById('display-area').classList.toggle('min');\r\n  };\r\n\r\n  const handleMarkdownInput = e => {\r\n    dispatch({ type: 'SET_MARKDOWN_INPUT', markdown: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <div id='input-area' className='column'>\r\n      <header id='input-header' className='col-head'>\r\n        <IconContext.Provider value={{ className: 'head-icon' }}>\r\n          <h1>\r\n            <FaCode />\r\n            Editor\r\n          </h1>\r\n        </IconContext.Provider>\r\n        <button\r\n          id='input-btn'\r\n          className='col-head-btn'\r\n          onClick={handleMaxInput}\r\n        >\r\n          {maxInput ? <MdFullscreenExit /> : <MdFullscreen />}\r\n        </button>\r\n      </header>\r\n      <div id='input-body' className='col-body'>\r\n        <textarea\r\n          id='editor'\r\n          placeholder={placeholder}\r\n          type='text'\r\n          value={markdown}\r\n          onChange={handleMarkdownInput}\r\n        ></textarea>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InputArea;\r\n","import React, { useReducer } from 'react';\nimport DisplayArea from './components/DisplayArea';\nimport InputArea from './components/InputArea';\nimport AppContext from './context/AppContext';\nimport marked from 'marked';\nimport './stylesheets/styles.scss';\n\nfunction App() {\n  const initialState = {\n    markdown: '',\n    maxDisplay: false,\n    maxInput: false\n  };\n\n  const stateReducer = (state = initialState, action) => {\n    switch (action.type) {\n      case 'SET_MAX_DISPLAY':\n        return {\n          ...state,\n          maxDisplay: action.maxDisplay\n        };\n      case 'SET_MAX_INPUT':\n        return {\n          ...state,\n          maxInput: action.maxInput\n        };\n      case 'SET_MARKDOWN_INPUT':\n        return {\n          ...state,\n          markdown: action.markdown\n        };\n      default:\n        return state;\n    }\n  };\n\n  const [appState, dispatch] = useReducer(stateReducer, initialState);\n\n  return (\n    <AppContext.Provider value={{ appState, dispatch }}>\n      <div className='App'>\n        <DisplayArea />\n        <InputArea />\n      </div>\n    </AppContext.Provider>\n  );\n}\n\n// ALLOWS LINE BREAKS WITH RETURN BUTTON\nmarked.setOptions({\n  breaks: true\n});\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './stylesheets/styles.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}